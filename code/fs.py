from malware_model import build,fit_predict,METRIC,get_score,count_encode 
import cudf as gd
from ml_robot import timer
import os
import pandas as pd
import numpy as np
from bs import bslog
os.environ['CUDA_VISIBLE_DEVICES'] = '1'
def fw(model_name):
    good = []
    mode = 'cv'
    X,Xt,y,yt,names,tr_id,te_id = build(mode,build_list=[1],cache=[0])
    yp,model = fit_predict(names,X,y,Xt,yt,model_name=model_name)
    del model
    best = get_score(yt,yp,METRIC)
    N = X.shape[1]
    name2 = names.copy()
    for i in range(N):
        bf = None
        for c,col in enumerate(name2):
            if col.startswith('count_'):
                continue
            col = 'count_%s'%col
            if col in good:
                continue
            X1,X1t = build_new_fea(X[:,c],Xt[:,c])
            if X1.shape[1] == 0:
                continue
            X_tmp = np.hstack([X,X1])
            Xt_tmp = np.hstack([Xt,X1t])
            names_tmp = names + [col]
            yp,model = fit_predict(names_tmp,X_tmp,y,Xt_tmp,yt,model_name=model_name)
            del model
            score = get_score(yt,yp,METRIC)
            print(good+[col],score,best)
            bslog(good+[col],score,'fs_count.log')
            if best<score:
                best = score
                bf = col
                Xb = X1.copy()
                Xtb = X1t.copy()
        if bf is None:
            break
        good.append(bf)
        names.append(bf)
        X,Xt = np.hstack([X,Xb]),np.hstack([Xt,Xtb])

@timer
def build_new_fea(x,xt):
    N = len(x)
    x = np.concatenate([x,xt])
    gtr = gd.DataFrame()
    gtr['x'] = np.ascontiguousarray(x)
    
    df = count_encode(gtr,['x'])
    data = df.to_pandas().values
    print('after count encode',data.shape)
    del df,gtr
    return data[:N],data[N:]

if __name__ == '__main__':
    fw('xgb')
