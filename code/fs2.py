from malware_model import build,METRIC,get_score,mtr_encode,YCOL 
import cudf as gd
from ml_robot import timer
import os
import pandas as pd
import numpy as np
from bs import bslog,fit_predict

os.environ['CUDA_VISIBLE_DEVICES'] = '3'
def fw(model_name):
    good = []#['mtr_AVProductStatesIdentifier','mtr_CountryIdentifier']
    mode = 'cv'
    X,Xt,y,yt,names,tr_id,te_id = build(mode,build_list=[1,2,4],cache=[0,0,0])
    for c,col in enumerate(names.copy()):
        col = 'mtr_%s'%col
        if col in good:
            X1,X1t = build_new_fea(X[:,c],Xt[:,c],y)
            X = np.hstack([X,X1])
            Xt = np.hstack([Xt,X1t])
            names.append(col)
        
    yp,model = fit_predict(names,X,y,Xt,yt,model_name=model_name)
    del model
    best = get_score(yt,yp,METRIC)
    #best = 100
    N = X.shape[1]
    print('best %.4f'%best)
    names2 = names.copy()
    for i in range(N):
        bf = None
        for c,col in enumerate(names2):
            if col.startswith('mtr_') or col.startswith('count_') or col.startswith('emb_'):
                continue
            col = 'mtr_%s'%col
            if col in good:
                continue
            X1,X1t = build_new_fea(X[:,c],Xt[:,c],y)
            if X1.shape[1] == 0:
                continue
            X_tmp = np.hstack([X,X1])
            Xt_tmp = np.hstack([Xt,X1t])
            names_tmp = names + [col]
            yp,model = fit_predict(names_tmp,X_tmp,y,Xt_tmp,yt,model_name=model_name)
            del model
            score = get_score(yt,yp,METRIC)
            #score = 0
            print(good+[col],score,best)
            bslog(good+[col],score,'fs_mtr.log')
            if best<score:
                best = score
                bf = col
                Xb = X1.copy()
                Xtb = X1t.copy()
        if bf is None:
            break
        good.append(bf)
        names.append(bf)
        X,Xt = np.hstack([X,Xb]),np.hstack([Xt,Xtb])

@timer
def build_new_fea(x,xt,y):
    N = len(x)
    #x = np.concatenate([x,xt])
    gtr = gd.DataFrame()
    gtr['x'] = np.ascontiguousarray(x)
    gtr[YCOL] = np.ascontiguousarray(y)
    gte = gd.DataFrame()
    gte['x'] = np.ascontiguousarray(xt)

    tr,te = mtr_encode(gtr,gte,['x'])
    tr = tr.to_pandas().values
    te = te.to_pandas().values
    print('after mtr encode',tr.shape,te.shape)
    del gtr,gte
    #if tr.shape[1]==0:
    return tr,te
    tr = (tr*100).astype(np.int32)
    te = (te*100).astype(np.int32)
    df = np.vstack([tr,te])
    df[:,0] = df[:,0].argsort().argsort()
    return df[:N],df[N:]

if __name__ == '__main__':
    fw('xgb')
